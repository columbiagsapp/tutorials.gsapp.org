<?php
/**
 * @file
 * Integration module for a version of Backbone.js for Drupal.
 *
 * TODO integrate with Backbone bootstrapping.
 *   See (http://documentcloud.github.com/backbone/#FAQ-bootstrap).
 */

/**
 * Implements hook_help().
 */
function backbone_help($path, $arg) {
  switch ($path) {
    case 'admin/help#backbone':
      return t("Extensions to the backbone.js client-side MVC framework to make building interactive user interfaces with Drupal a breeze and a snap and a cinch!");
  }
}

/**
 * Implements hook_init().
 *
 * Add backbone.js and dependency underscore.js to all pages, along with
 * related settings.
 *
 * TODO Make this conditional by page/configurable.
 */
function backbone_init() {
  // Add base libraries.
  if ($path = libraries_get_path('underscore')) {
    drupal_add_js($path . '/underscore.js');
  } else {
    drupal_set_message(t('This page requires underscore.js to run preoperly.  Please contact the site administrator regarding this issue.'), 'error');
  }
  if ($path = libraries_get_path('backbone')) {
    drupal_add_js($path . '/backbone.js');
  } else {
    drupal_set_message(t('This page requires backbone.js to run preoperly.  Please contact the site administrator regarding this issue.'), 'error');
  }
  if ($path = libraries_get_path('handlebars')) {
    drupal_add_js($path . '/handlebars-1.0.0.beta.6.js');
  }
  // Add Drupal Backbone js
  $module_path = drupal_get_path('module', 'backbone');
  drupal_add_js($module_path . '/js/drupalbackbone.js');
  drupal_add_js($module_path . '/js/drupalbackbone-services.js');
  $backbone_settings = array(
    'backbone' => array(
      'endpoint' => _backbone_variable_get('endpoint'),
    ),
  );
  drupal_add_js($backbone_settings, 'setting');
}

/**
 * Add templates to closure region.
 *
 * We need to do this here to allow Backbone module developers
 * the ability to add templates in their page callbacks.
 * 
 * @param mixed $vars 
 * @access public
 * @return void
 */
function backbone_preprocess_page(&$vars) {
  $templates = backbone_get_templates();
  foreach ((array) $templates as $template_id => $template_source) {
    $vars['closure'] .= theme('backbone_template', $template_id, $template_source);
  }
}

/**
 * Implements hook_menu().
 */
function backbone_menu() {
  $items['admin/settings/backbone'] = array(
    'title' => 'Backbone',
    'description' => 'Settings for the Backbone.js integration module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('backbone_settings_form'),
    'access arguments' => array('administer backbone'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'backbone.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function backbone_permission() {
  return array('administer backbone');
}

/**
 * Implements hook_theme().
 */
function backbone_theme($existing, $type, $theme, $path) {
  return array(
    'backbone_template' => array(
      'arguments' => array('template_id', 'template_source', 'template_type')
    ),
  );
}

/**
 * Theme function for wrapping the template as needed for Backbone.View.render.
 *
 * By default, Drupal.Backbone.View uses Underscore templating and the
 * element's DOM ID to extract the template source.
 *
 * @param Array $variables
 *   Variables array containing the id and source for the template.
 *
 *   Note: all template sources provided by modules should be provided by theme
 *   functions as well, so they can be overridden at the theme level as desired.
 *
 * @return String
 *   The HTML for the wrapped template.
 */
function theme_backbone_template($template_id, $template_source, $template_type = 'text/underscore-template') {
  return <<<TEMPLATE
<script id="{$template_id}" type="{$template_type}">
{$template_source}
</script>
TEMPLATE;
}

/**
 * Add template to array of templates to be included in page.
 *
 * Uses a global to store array, attaches at hook_page_build.
 *
 * @param String $template_id
 *   The id of this template, will be the selector used in Backbone View.
 * @param String $template_source
 *   The source code of the template.
 *
 *   Note: all template sources provided by modules should be provided by theme
 *   functions as well, so they can be overridden at the theme level as desired.
 *
 * @return void
 *   Does not return anything of note.
 */
function backbone_add_template($template_id, $template_source) {
  global $_backbone_templates;
  $_backbone_templates[$template_id] = $template_source;
}

/**
 * Get the tempalates array.
 *
 * Abstracts from the global, so implementation can be refactored as needed.
 *
 * @return Array
 *   Array of templates, keyed by template id.
 */
function backbone_get_templates() {
  global $_backbone_templates;
  return $_backbone_templates;
}

/**
 * Abstraction function to simplify default variable values.
 *
 * @param String $name
 *   Variable name, minus the "backbone_" prefix.
 * @param Mixed $default_value
 *   The default value of the variable, if null, we look up in a defaults array
 *   in this function.
 *
 * @return Mixed
 *   Value of variable or default.
 */
function _backbone_variable_get($name, $default_value = NULL) {
  $defaults = array(
    'endpoint' => '/backbone/rest',
  );
  if (!$default_value) {
    $default_value = array_key_exists($name, $defaults) ? $defaults[$name] : NULL;
  }
  return variable_get('backbone_' . $name, $default_value);
}
